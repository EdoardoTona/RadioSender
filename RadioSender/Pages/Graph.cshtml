

@page

@using RadioSender.Hubs;

@{
  ViewData["Title"] = "Graph";
  Layout = "_Layout";
}


@section Head
{
  <link rel="stylesheet" href="~/lib/vis/vis-network.min.css">
  <script src="~/lib/vis/vis-network.min.js"></script>
}

<div class="row h-100">
  <div class="col h-100 bg-secondary bg-gradient border-end">
    <div class="h-100" id="graph"></div>
  </div>
  <div class="col h-100 overflow-auto bg-light bg-gradient">
    <h3 class="mt-2">Nodes</h3>
    <div class="table-responsive">
      <table class="table table-sm">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Label</th>
            <th scope="col">Value</th>
            <th scope="col">Title</th>
          </tr>
        </thead>
        <tbody id="nodes-table">
        </tbody>
      </table>
    </div>
    <h3 class="mt-2">Edges</h3>
    <div class="table-responsive">
      <table class="table table-sm">
        <thead>
          <tr>
            <th scope="col">From</th>
            <th scope="col">To</th>
            <th scope="col">Value</th>
            <th scope="col">Title</th>
          </tr>
        </thead>
        <tbody id="edges-table">
        </tbody>
      </table>
    </div>
  </div>
</div>

@section Scripts
{
  <script>

    let container = document.getElementById("graph");
    let nodesList = document.getElementById("nodes-table");
    let edgesList = document.getElementById("edges-table");

    let nodes = new vis.DataSet([]);
    let edges = new vis.DataSet([]);


    let network = new vis.Network(
      container,
      { nodes, edges }, {
      interaction: {
      },
      layout: {
        randomSeed: 1

      },
      physics: {
        enabled: true,
        stabilization: false
      },
      nodes: {
        shape: "dot",
        scaling: {
          label: false,
        }
      },
      edges: {
        scaling: {
          label: false,
        }
      }
    });

    connection.on("graph", (e, n) => {
      console.log(e, n);

      var nodesBefore = nodes.length;

      try {

        for (var node of n) {
          node.group = 1;
          nodes.update(node);
        }


        for (var edge of e) {
          edge.group = 1;
          edges.update(edge);
        }

      } catch (e) {
        console.log(e)
      }

      if (nodesBefore != nodes.length) {
        // new node!
        //network.fit()
        //setTimeout(() => network.fit(), 1000);
      }


      nodesList.innerHTML = "";
      nodes.forEach(item => {
        var tr = document.createElement("tr");
        tr.innerHTML = `
                             <td>${item.id}</td>
                             <td>${item.label}</td>
                             <td>${item.value}</td>
                             <td>${item.title}</td>
                        `;
        nodesList.appendChild(tr);
      });

      edgesList.innerHTML = "";
      edges.forEach(item => {
        var tr = document.createElement("tr");
        tr.innerHTML = `
                   <td>${item.from}</td>
                   <td>${item.to}</td>
                   <td>${item.value}</td>
                   <td>${item.title}</td>
              `;
        edgesList.appendChild(tr);

        edges.update(item);
      });


    });

    start().then(() => connection.invoke("JoinGroup", "@DeviceHub.GROUP_GRAPH"));
    connection.onreconnected(() =>  connection.invoke("JoinGroup", "@DeviceHub.GROUP_GRAPH"));

  </script>
}

