

@page

@using Liveresults.Hubs;

@{
  ViewData["Title"] = "Results";
  Layout = "_Layout";
}


@section Head
{
  <link rel="stylesheet" href="~/lib/bootstrap-table/bootstrap-table.min.css">
  <script src="~/lib/bootstrap-table/bootstrap-table.min.js"></script>
  <style>
    #categories {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }

      #categories > a {
        margin: 3px;
      }

    .bg-orange {
      background: orange;
    }
  </style>
}

<div class="row h-100 d-flex flex-column">
  <div class="flex-grow-0" id="categories">
  </div>
  <div class="col bg-light bg-gradient border-end" id="container">
    <table id="results"
           class="table table-striped table-sm"
           data-height="400"
           @*data-sortable="true"
           data-sort-name="time"
           data-sort-order="desc"*@
           data-virtual-scroll="true"
           data-row-style="rowStyle"
           data-custom-sort="customSort"
           data-search="true">
      <thead>
        <tr>
        </tr>
      </thead>
    </table>
  </div>
</div>


@section Scripts
{
  <script>

    var categoriesContainer = document.getElementById("categories");

    var categoriesMap = new Map();
    var $table = $('#results');


    let ro = new ResizeObserver(elements => {
      $table.bootstrapTable('refreshOptions', {
        height: container.clientHeight
      })
    });

    ro.observe(container);



    connection.on("UpdateCategories", (cc) => {
      categoriesContainer.innerHTML = "";
      categoriesMap = new Map();
      for (var category of cc) {

        categoriesMap.set(category.shortName, category);

        var el = document.createElement("a");
        el.innerHTML = category.shortName;
        el.href = "#" + category.shortName;
        el.setAttribute("onclick", "ChangeClass('" + category.shortName + "')");

        el.classList.add("btn");
        el.classList.add("btn-secondary");
        el.classList.add("btn-sm");
        categoriesContainer.appendChild(el);
      }
    });

    connection.on("UpdateResult", (list) => {
      // TODO
      console.log(list);

      for (var item of list) {

        for (var control in item.intermediates) {
          item[control] = item.intermediates[control];
        }
      }

      $table.bootstrapTable('load', list);

    });

    function ChangeClass(shortName) {
      console.log(shortName);
      GROUP = "results" + shortName;
      connection.invoke("JoinGroup", GROUP, { "userAgent": navigator.userAgent });

      var columns =
        [{
          title: '#',
          field: 'position'
        }, {
          title: 'Name',
          field: 'name',
          sortable: true
        }, {
          title: 'Start',
          field: 'start',
          sortable: true
        }];

      var c = categoriesMap.get(shortName);

      console.log(c);

      for (var intermediate of c.intermediates) {
        columns.push({
          title: intermediate.name,
          field: intermediate.code,
          sortable: true
        });
      }

      columns.push({
        title: "Total",
        field: "total",
        sortable: true
      })
      $table.bootstrapTable('destroy');

      $table.bootstrapTable({
        columns,
        height: container.clientHeight,
        sortReset: true
      });

    }


    function rowStyle(row, index) {

      if (row.lastUpdated) {
        return {
          classes: 'bg-orange'
        }
      }

      return {};
    }

    function customSort(sortName, sortOrder, data) {
      var order = sortOrder === 'desc' ? -1 : 1



      data.sort(function (a, b) {

        var aa, bb;
        if (sortName == "total") {
          aa = a.totalTime;
          bb = b.totalTime;
        }
        else if (!isNaN(sortName)) {
          aa = a.intermediatesTimes[sortName];
          bb = b.intermediatesTimes[sortName];
        } else {

          aa = a[sortName];
          bb = b[sortName];
        }

        if (aa == null) {
          return order;
        }
        if (bb == null) {
          return order * -1;
        }

        if (aa < bb) {
          return order * -1
        }
        if (aa > bb) {
          return order
        }
        return 0
      })
    }


    $(function () {
      setInterval(() => {
        $.each($("[data-running-time-from]"), (i, val) => {

          var startTime = val.dataset.runningTimeFrom;
          var now = Math.floor(Date.now() / 1000);
          var s = now - startTime;
          val.innerText = new Date(s * 1000).toISOString().substr(11, 8)
        });

      }, 1000);
    });

    start();

  </script>
}

